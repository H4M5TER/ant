type list 'a =
  | Nil
  | Cons of 'a * list 'a;;

let map =
  let rec map =
    fun f -> fun l -> match l with
    | Nil -> `Nil 
    | Cons (hd, tl) -> `Cons (f hd, map f tl)
  in map;;

(*
type tree 'a = Leaf of 'a | Node of tree 'a * tree 'a;;

let flatten = fun t ->
  let rec aux = fun t -> match t with
    | Leaf x -> fun acc -> `Cons (x, acc)
    | Node (l, r) -> fun acc -> aux l (aux r acc)
  in
  aux `Nil t
*)
