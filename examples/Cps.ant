let id = fun x -> x;;
let fact =
  let rec fact =
    fun n ->
      if n = 0 then 1 else n * (fact (n - 1))
  in
  fact;;
type nat =
  | S of nat
  | Z;;
let (even, odd) = 
  let rec even = fun x ->
    match x with
    | S x -> odd x
    | Z -> true
  and odd = fun x ->
    match x with
    | S x -> even x
    | Z -> false
  in (even, odd);;
let _ = even (S (S Z));;
let s = S;;
let z = Z;;
let _ = even (s (s z));;